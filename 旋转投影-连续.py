import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
import time


def get_vertical_project(img):  # 竖直
    lst = []
    h = img.shape[0]
    w = img.shape[1]
    #
    project_img = np.zeros(shape=(img.shape), dtype=np.uint8) + 255
    for j in range(w):
        num = 0
        for i in range(h):
            if img[i][j] < 255:
                num += 1
        lst.append(num)
        for k in range(num):
            project_img[h - 1 - k][j] = 0
    return project_img, max(lst)


def skeleton_extraction(un8):
    skel = np.zeros(un8.shape, np.uint8)
    erode = np.zeros(un8.shape, np.uint8)
    temp = np.zeros(un8.shape, np.uint8)
    i = 0
    while (cv.countNonZero(un8) != 0):
        erode = cv.erode(un8, cv.getStructuringElement(cv.MORPH_ELLIPSE, (3, 3)))
        temp = cv.dilate(erode, cv.getStructuringElement(cv.MORPH_ELLIPSE, (3, 3)))
        temp = cv.subtract(un8, temp)
        skel = cv.bitwise_or(skel, temp)
        un8 = erode.copy()
        i += 1
    return skel


def detect_direction(img1):
    flag = 0
    for j in range(img1.shape[1]):
        for i in range(img1.shape[0]):
            if img1[i][j] >= 150:
                flag += 1
    return flag


t1 = time.time()
str1 = './liantongquyu/13.jpg'
# str1 = 'D:/DataSave/Python/pap2/8.jpg'
un7 = cv.imread(str1, 0)
ori_img = cv.imread(str1, 0)

# -----------------------------------------------------------------------------------#
# lst = []
# un7 = cv.erode(un7, kernel=np.ones((3, 3), np.uint8))
# contours, hierarchy = cv.findContours(un7, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
# for x in range(len(contours)):
#     area = cv.contourArea(contours[x])
#     lst.append(area)
# toupl = contours[:lst.index(max(lst))] + contours[lst.index(max(lst)) + 1:]
# for l in range(len(toupl)):
#     x, y, w, h = cv.boundingRect(toupl[l])
#     for k in range(x, x + w):
#         for j in range(y, y + h):
#             un7[j, k] = 0
# un7 = cv.dilate(un7, kernel=np.ones((3, 3), np.uint8))
# -----------------------------------------------------------------------------------#

un8 = un7.copy()
skel = skeleton_extraction(un8)
skel = cv.erode(skel, kernel=np.ones((2, 1), np.uint8))

# H, W = skel.shape
# skel = np.pad(skel, ((int(W / 2), int(W / 2)), (int(H / 2), int(H / 2))), 'constant', constant_values=((0, 0), (0, 0)))

rows, cols = skel.shape  # 高度 宽度

# img1 = skel[0:int(rows / 2), 0:int(cols / 2)]
# img2 = skel[0:int(rows / 2), int(cols / 2):cols]
# img3 = skel[int(rows / 2):rows, 0:int(cols / 2)]
# img4 = skel[int(rows / 2):rows, int(cols / 2):cols]
# img1_flag = detect_direction(img1)
# img2_flag = detect_direction(img2)
# img3_flag = detect_direction(img3)
# img4_flag = detect_direction(img4)
#
# lst_ax = []
# lst_angle = []
# if (img1_flag + img4_flag) > (img2_flag + img3_flag):
#     print('left')
#     for ii in range(-30, 0, 1):  # -10,11,1 i/2
#         print(ii / 10)
#         lst_ax.append(ii / 10)
#         m = cv.getRotationMatrix2D(((cols - 1) / 2, (rows - 1) / 2), ii / 10, 1)
#         dst = cv.warpAffine(skel, m, (cols, rows))
#         dst = 255 - dst
#         vel, max_y = get_vertical_project(dst)
#         lst_angle.append(max_y)
#         print(max_y)
# else:
#     print('right')
#     for ii in range(1, 30, 1):  # -10,11,1 i/2
#         print(ii / 10)
#         lst_ax.append(ii / 10)
#         m = cv.getRotationMatrix2D(((cols - 1) / 2, (rows - 1) / 2), ii / 10, 1)
#         dst = cv.warpAffine(skel, m, (cols, rows))
#         dst = 255 - dst
#         vel, max_y = get_vertical_project(dst)
#         lst_angle.append(max_y)
#         print(max_y)


lst_ax = []
lst_angle = []

for ii in range(-30, 0, 1):  # -10,11,1 i/2
    print(ii / 10)
    lst_ax.append(ii / 10)
    m = cv.getRotationMatrix2D(((cols - 1) / 2, (rows - 1) / 2), ii / 10, -1)  # 1: 逆时针
    dst = cv.warpAffine(skel, m, (cols, rows))
    dst = 255 - dst
    vel, max_y = get_vertical_project(dst)
    lst_angle.append(max_y)
    print(max_y)

print('angle: ', lst_ax[lst_angle.index(max(lst_angle))])
print(time.time() - t1)
print(lst_angle)
plt.Figure()
plt.plot(lst_ax, lst_angle, color='r', marker='o', linestyle=' ', linewidth=1)
plt.xticks(fontsize=12)  # x轴刻度字体大小
plt.yticks(fontsize=12)  # y轴刻度字体大小
plt.grid(axis='y', linestyle='--', linewidth=0.5)
plt.scatter(lst_ax, lst_angle, s=1, c='r')  # 散点图点大小
plt.show()

# [183, 205, 195, 184, 174, 167, 152, 166, 161, 167, 142, 151, 159, 161, 167, 158, 158, 151, 154, 161, 159, 156, 146, 137, 135, 125, 112, 107, 108, 105, 103, 97, 94, 94, 95, 106, 104, 91, 93, 94, 82, 83, 81, 78, 82, 83, 83, 82, 82, 78, 76, 76, 73, 71, 68, 69, 71, 70, 71, 70, 68, 70, 69, 67, 67, 65, 65, 62, 61, 64, 61, 63, 61, 63, 65, 64, 63, 64, 63, 62, 60, 57, 57, 58, 58, 52, 52, 50, 52, 54, 51, 47, 48, 48, 51, 52, 54, 55, 54, 53, 53, 50, 48, 49, 52, 54, 52, 51, 51, 49, 48, 47, 46, 45, 45, 46, 46, 45, 46, 46, 45, 43, 44, 42, 44, 42, 43, 42, 44, 43, 43, 44, 42, 41, 41, 40, 40, 40, 40, 39, 39, 40, 41, 41, 42, 42, 43, 41, 40, 39, 40, 39, 37, 37, 35, 35, 34, 34, 35, 36, 35, 35, 35, 33, 34, 34, 34, 35, 35, 34, 34, 36, 35, 36, 36, 35, 35, 35, 34, 33, 34, 35, 35, 35, 37, 37, 34, 34, 34, 34, 35, 37, 39, 40, 40, 41, 39, 39, 40, 38, 37, 37, 37, 37, 36, 35, 33, 33, 33, 34, 35, 36, 35, 35, 37, 38, 38, 37, 35, 35, 34, 32, 32, 33, 34, 34, 34, 35, 33, 33, 31, 30, 31, 33, 33, 34, 34, 35, 35, 34, 34, 35, 33, 31, 33, 33, 32, 31, 31, 31, 31, 30, 28, 30, 30, 28, 29, 29, 29, 30, 30, 30, 31, 33, 33, 32, 29, 29, 29, 29, 30, 30, 30, 29, 29, 29, 28, 29, 29, 29, 30, 29, 29, 31, 32, 33, 33, 33, 32, 32, 29, 29, 27, 27, 28, 29, 29, 30, 29, 29, 29, 28, 29, 30, 30, 30, 26, 26, 25, 26, 26, 27, 26, 25, 26, 27, 27, 27, 26, 26, 26, 24, 26, 27, 25, 26, 26, 26, 26, 28, 28, 27, 26, 26, 26, 27, 27, 27, 27, 27, 25, 24, 24, 23, 23, 23, 24, 24, 23, 23, 24, 28, 25, 25, 26, 26, 27, 27, 27, 27, 26, 26, 25, 24, 24, 24, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 25, 25, 25, 24, 23, 22, 22, 21, 22, 21, 22, 21, 21, 21, 21, 22, 23, 22, 22, 22, 22, 23, 21, 21, 22, 22, 21, 21, 22, 21, 21, 21, 21, 21, 22, 21, 22, 22, 22, 21, 21, 22, 23, 23, 23, 23, 23, 22, 22, 24, 22, 22, 23, 24, 24, 24, 23, 22, 22, 22, 20, 20, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 20, 20, 20, 18, 18, 16, 16, 16, 17, 17, 17, 17, 17, 17, 20, 20, 20, 19, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 20, 19, 21, 21, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 20, 20, 19, 19, 19, 19, 19, 18, 19, 19, 18, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 20, 20, 19, 20, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 22, 20, 19, 19, 19, 19, 19, 19, 18, 17, 17, 16, 16, 16, 17, 20, 20, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 18, 18, 17, 17, 16, 16, 16, 17, 15, 16, 16, 16, 16, 17, 18, 18, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 16, 16, 16, 16, 16, 15, 14, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 14, 14, 15, 15, 14, 14, 14, 14, 14, 14, 14, 15, 16, 15, 14, 13, 13, 13, 13, 13, 14, 15, 14, 14, 14, 14, 14, 13, 13, 13, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 15, 15, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 13, 13, 14, 13, 13, 14, 14, 14, 14, 14, 15, 15, 14, 15, 15, 14, 15, 14, 14, 14, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 14, 14, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 14, 14, 15, 15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 14, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 13, 13, 13, 13, 13, 13, 14, 13, 13, 12, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 12, 13, 12, 12, 12, 11, 11, 12, 12, 14, 15, 15, 14, 14, 14, 13, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 12, 12, 12, 11, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 13, 11, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 13, 13, 14, 14, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 15, 15, 14, 14, 14, 14, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 14, 15, 15, 15, 14, 14, 13, 13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 14, 14, 14, 14, 14, 13, 13, 13, 14, 15, 16, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 14, 15, 15, 15, 15, 15, 15, 15, 14, 14, 15, 15, 15, 15, 15, 15, 16, 14, 15, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 15, 15, 15, 15, 14, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 16, 16, 16, 16, 17, 17, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17, 15, 17, 16, 17, 16, 17, 17, 18, 17, 18, 17, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 25, 24, 24, 23, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 20, 22, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 23, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 27, 26, 26, 26, 26, 27, 26, 27, 27, 27, 27, 26, 26, 26, 27, 25, 26, 26, 27, 26, 26, 27, 27, 28, 30, 30, 30, 30, 30, 29, 28, 28, 29, 29, 33, 31, 32, 30, 30, 30, 30, 29, 28, 29, 32, 33, 33, 32, 31, 31, 31, 29, 28, 32, 30, 30, 32, 31, 30, 29, 30, 30, 31, 31, 32, 31, 31, 29, 28, 30, 32, 31, 28, 30, 29, 29, 30, 34, 31, 34, 32, 31, 31, 32, 35, 36, 37, 38, 41, 43, 46, 47, 46, 46, 46, 45, 46, 47, 43, 43, 44, 43, 44, 46, 46, 45, 43, 44, 44, 44, 46, 46, 45, 44, 43, 44, 44, 43, 43, 44, 44, 45, 47, 46, 46, 47, 46, 47, 43, 45, 44, 44, 47, 46, 46, 45, 47, 48, 49, 51, 55, 54, 54, 55, 57, 57, 53, 52, 53, 54, 55, 56, 57, 55, 58, 59, 59, 61, 60, 58, 61, 62, 63, 65, 66, 66, 63, 65, 65, 65, 64, 66, 67, 66, 65, 66, 64, 66, 67, 67, 68, 70, 68, 67, 67, 67, 69, 69, 72, 71, 71, 71, 74, 70, 76, 80, 78, 77, 73, 76, 78, 78, 72, 69, 70, 70, 70, 74, 75, 74, 78, 76, 77, 76, 77, 78, 80, 79, 80, 82, 84, 87, 88, 88, 87, 88, 90, 93, 97, 96, 102, 105, 104, 102, 106, 112, 108, 113, 123, 123, 125, 125, 127, 126, 138, 135, 131, 138, 137, 134, 140, 149, 152, 162, 170, 178, 174, 169, 166, 174, 179, 186, 201, 224, 250, 283, 307, 351, 396, 436, 457, 461, 454, 436, 394, 341, 305, 289, 273, 229, 220, 224, 215, 198, 186, 219, 183, 205, 195, 184, 174, 167, 152, 167, 161, 167, 142, 152, 159, 161, 167, 158, 158, 152, 154, 161, 159, 156, 146, 138, 135, 125, 112, 107, 108, 105, 103, 97, 94, 94, 95, 106, 104, 91, 93, 93, 82, 83, 81, 78, 82, 83, 83, 82, 82, 78, 76, 76, 73, 71, 68, 69, 71, 70, 71, 70, 68, 70, 69, 67, 67, 65, 65, 62, 61, 64, 61, 63, 61, 63, 65, 64, 63, 64, 63, 62, 60, 57, 57, 58, 58, 52, 52, 51, 52, 54, 51, 47, 48, 48, 51, 52, 54, 55, 54, 53, 53, 50, 48, 49, 52, 54, 52, 51, 51, 49, 48, 47, 46, 45, 45, 46, 46, 45, 46, 46, 45, 43, 44, 42, 44, 42, 43, 42, 44, 43, 43, 44, 42, 41, 41, 40, 40, 40, 40, 39, 39, 40, 41, 41, 42, 42, 43, 41, 40, 39, 40, 39, 37, 37, 35, 35, 34, 34, 35, 36, 35, 35, 35, 33, 33, 34, 34, 35, 35, 34, 34, 36, 35, 36, 36, 35, 35, 35, 34, 33, 34, 35, 35, 35, 37, 37, 34, 34, 34, 34, 35, 37, 39, 40, 40, 41, 39, 39, 40, 38, 37, 37, 37, 37, 36, 35, 33, 33, 33, 34, 35, 36, 35, 35, 37, 38, 38, 37, 35, 35, 34, 32, 32, 33, 34, 34, 34, 35, 33, 33, 31, 30, 31, 33, 33, 34, 34, 35, 35, 34, 34, 35, 33, 31, 33, 33, 32, 31, 31, 31, 31, 30, 28, 30, 30, 28, 29, 29, 29, 30, 30, 30, 31, 33, 33, 32, 29, 29, 29, 29, 30, 30, 30, 29, 29, 29, 28, 29, 29, 29, 30, 29, 29, 31, 32, 33, 33, 33, 32, 32, 29, 29, 27, 27, 28, 29, 29, 30, 29, 29, 29, 28, 29, 30, 30, 30, 26, 26, 25, 26, 26, 27, 26, 25, 26, 27, 27, 27, 26, 26, 26, 24, 26, 27, 25, 26, 26, 26, 26, 28, 28, 27, 26, 26, 26, 27, 27, 27, 27, 27, 25, 24, 24, 23, 23, 23, 24, 24, 23, 23, 24, 28, 25, 25, 26, 26, 27, 27, 27, 27, 26, 26, 25, 24, 24, 24, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 25, 25, 25, 24, 23, 21, 22, 21, 22, 21, 22, 21, 21, 21, 21, 22, 23, 22, 22, 22, 22, 23, 21, 21, 22, 22, 21, 21, 22, 21, 21, 21, 21, 21, 22, 21, 22, 22, 22, 21, 21, 22, 23, 23, 23, 23, 23, 22, 22, 24, 22, 22, 23, 24, 24, 24, 23, 22, 22, 22, 20, 20, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 19, 19, 19, 19, 19, 18, 20, 20, 20, 18, 18, 16, 16, 16, 17, 17, 17, 17, 17, 17, 20, 20, 20, 19, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 20, 19, 21, 21, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 20, 20, 19, 19, 19, 19, 19, 18, 19, 18, 18, 17, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 20, 20, 19, 20, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 22, 21, 19, 19, 19, 19, 19, 19, 18, 17, 17, 16, 16, 16, 17, 20, 20, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 18, 18, 17, 17, 16, 16, 16, 17, 15, 16, 16, 16, 16, 17, 17, 18, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 16, 16, 16, 16, 16, 15, 14, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 14, 14, 15, 15, 14, 14, 14, 14, 14, 14, 14, 15, 16, 15, 14, 13, 13, 13, 13, 13, 14, 15, 14, 14, 14, 14, 14, 13, 13, 13, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 15, 15, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 13, 13, 14, 13, 13, 14, 14, 14, 14, 14, 15, 15, 14, 15, 15, 14, 15, 14, 14, 14, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 14, 14, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 14, 14, 15, 15, 15, 14, 14, 14, 13, 13, 12, 12, 13, 14, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 13, 13, 13, 13, 13, 13, 14, 13, 13, 12, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 12, 13, 12, 12, 12, 11, 11, 12, 12, 14, 15, 15, 14, 14, 14, 13, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 12, 12, 12, 11, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 13, 11, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 13, 13, 14, 14, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 15, 14, 14, 14, 14, 14, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 14, 15, 15, 15, 14, 14, 13, 13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 14, 14, 14, 14, 14, 13, 13, 13, 14, 15, 16, 15, 16, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 14, 15, 15, 15, 15, 15, 15, 15, 14, 14, 15, 15, 15, 15, 15, 15, 16, 14, 15, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 15, 15, 15, 15, 14, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 17, 17, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17, 15, 17, 16, 17, 16, 17, 17, 18, 17, 18, 17, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 25, 24, 24, 23, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 20, 21, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 23, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 27, 26, 26, 26, 26, 27, 26, 27, 27, 27, 27, 26, 26, 26, 27, 25, 26, 26, 27, 26, 26, 27, 27, 28, 30, 30, 30, 30, 30, 29, 28, 28, 29, 29, 33, 31, 32, 30, 30, 30, 30, 29, 28, 29, 32, 32, 33, 32, 31, 31, 31, 29, 28, 32, 30, 30, 32, 31, 30, 29, 31, 30, 31, 31, 32, 31, 31, 29, 28, 30, 31, 31, 28, 30, 29, 29, 30, 34, 32, 34, 32, 31, 31, 32, 35, 36, 37, 38, 41, 43, 46, 47, 46, 46, 46, 45, 46, 47, 43, 43, 44, 43, 44, 46, 46, 45, 43, 44, 44, 44, 46, 46, 45, 44, 43, 44, 44, 43, 43, 44, 44, 45, 47, 46, 46, 47, 46, 47, 42, 45, 44, 44, 47, 46, 46, 45, 47, 48, 49, 51, 55, 54, 54, 55, 57, 57, 53, 52, 53, 54, 55, 56, 57, 55, 58, 59, 59, 60, 60, 58, 61, 62, 63, 65, 66, 66, 63, 65, 65, 65, 64, 66, 67, 66, 65, 66, 64, 66, 67, 67, 68, 70, 68, 67, 67, 67, 69, 69, 72, 71, 71, 71, 74, 70, 76, 80, 78, 77, 73, 76, 78, 78, 72, 69, 70, 70, 70, 74, 75, 74, 78, 76, 77, 76, 77, 78, 80, 79, 80, 82, 84, 87, 89, 88, 87, 88, 90, 93, 97, 96, 102, 105, 104, 102, 106, 112, 108, 113, 122, 123, 125, 125, 127, 126, 138, 135, 131, 138, 137, 134, 140, 149, 152, 161, 170, 178, 174, 169, 166, 174, 179, 186, 201, 224, 250, 283, 307, 351, 396, 436, 457, 461, 454, 436, 395, 341, 305, 289, 273, 229, 220, 223, 215, 198, 186, 219]
